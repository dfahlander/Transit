"use strict";angular.module("app",["ngCookies","ngResource","ngRoute","ngSanitize","ngTouch"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}]),function(a){function b(a,b){function c(a){return a.forEach(function(a){j.departureStop.push(a.stop_name),j.arrivalStop.push(a.stop_name)})}function d(b,c,d){j.results=[];for(var f=null,g=null,h={},i=0;b.length>i;i++)b[i].stops.stop_name!==c?(g=b[i].stop_times,f&&g&&f.trip_id===g.trip_id&&f.departure_time<g.arrival_time&&(h={departure:f.departure_time,arrival:g.arrival_time,duration:e(f.departure_time,g.arrival_time)},j.results.push(h),console.log(j.results),f=null,h=null)):f=b[i].stop_times;a.$apply("results",function(a,b){j.results=a})}function e(a,b){var c=f(a),d=f(b),e=(d-c)/60;return e.toString()+" min"}function f(a){var b=a.split(":"),c=parseInt(b[0]),d=parseInt(b[1]),e=parseInt(b[2]);return 60*c*60+60*d+e}function g(){$("#search-result").empty(),$("#error").empty(),$("#noresult").hasClass("show")&&$("#noresult").removeClass("show")}function h(a,b){$("#loading-status").append('<p class="loading-status-'+b+'">'+a+"</p>")}function i(){$("#loading-status").empty()}var j=a;j.hello="Hello World",j.departureStop=[],j.arrivalStop=[],j.results=[],j.selectDeparture=j.departureStop[0],j.selectArrival=j.arrivalStop[0];var k=new b;k.getDBConnection().then(function(a){console.log("Database connected & Schema creation done successfully"),i(),h("Loading info...","blue"),setTimeout(function(){k.retrieveStops().then(function(a){i(),c(a)})["catch"](function(a){j.error=a})},200)}),j.findbtn=function(a,b){return g(),j.selectDeparture=a,j.selectArrival=b,console.log(a,b),a===b?(j.results=[],j.err=!0,void(j.error="The Departure and Arrival Stations must be different")):void k.searchSchedule(a,b).then(function(c){d(c,a,b),j.selected=!0,j.err=!1})}}angular.module("app").controller("MainController",b),b.$inject=["$scope","transitFactory"]}(this),function(){function a(){function a(a){return a.startsWith('"')?a.slice(1,a.length-1):a}function b(a){switch(a.getDay()){case 0:return"sunday";case 1:return"monday";case 2:return"tuesday";case 3:return"wednesday";case 4:return"thursday";case 5:return"friday";case 6:return"saturday"}}function c(a){var b="",c="",d=a.getFullYear().toString();return b=a.getMonth()<9?"0"+parseInt(a.getMonth()+1).toString():parseInt(a.getMonth()+1).toString(),c=a.getDate()<10?"0"+a.getDate():a.getDate().toString(),d+b+c}var d=function(){this.db=null,window.CT=this};return d.prototype.getDBConnection=function(){var a=this;if(null!=this.db)return this.db;var b={storeType:lf.schema.DataStoreType.INDEXED_DB};return a.buildSchema().connect(b).then(function(b){return a.db=b,a.onConnected(),a.insertData(),b})},d.prototype.onConnected=function(){this.calendar=this.db.getSchema().table("calendar"),this.calendar_dates=this.db.getSchema().table("calendar_dates"),this.routes=this.db.getSchema().table("routes"),this.stop_times=this.db.getSchema().table("stop_times"),this.stops=this.db.getSchema().table("stops"),this.trips=this.db.getSchema().table("trips"),console.log("DB connection established!")},d.prototype.buildSchema=function(){var a=lf.schema.create("transit",1);return a.createTable("calendar").addColumn("service_id",lf.Type.STRING).addColumn("monday",lf.Type.INTEGER).addColumn("tuesday",lf.Type.INTEGER).addColumn("wednesday",lf.Type.INTEGER).addColumn("thursday",lf.Type.INTEGER).addColumn("friday",lf.Type.INTEGER).addColumn("saturday",lf.Type.INTEGER).addColumn("sunday",lf.Type.INTEGER).addColumn("start_date",lf.Type.STRING).addColumn("end_date",lf.Type.STRING).addPrimaryKey(["service_id"]),a.createTable("calendar_dates").addColumn("service_id",lf.Type.STRING).addColumn("date",lf.Type.STRING).addColumn("exception_type",lf.Type.INTEGER).addPrimaryKey(["service_id"]),a.createTable("routes").addColumn("route_id",lf.Type.STRING).addColumn("route_short_name",lf.Type.STRING).addColumn("route_long_name",lf.Type.STRING).addColumn("route_type",lf.Type.INTEGER).addColumn("route_color",lf.Type.STRING).addPrimaryKey(["route_id"]),a.createTable("stop_times").addColumn("trip_id",lf.Type.STRING).addColumn("arrival_time",lf.Type.STRING).addColumn("departure_time",lf.Type.STRING).addColumn("stop_id",lf.Type.STRING).addColumn("stop_sequence",lf.Type.INTEGER).addColumn("pickup_type",lf.Type.INTEGER).addColumn("drop_off_type",lf.Type.INTEGER).addPrimaryKey(["stop_id","trip_id"]),a.createTable("stops").addColumn("stop_id",lf.Type.STRING).addColumn("stop_code",lf.Type.STRING).addColumn("stop_name",lf.Type.STRING).addColumn("stop_lat",lf.Type.STRING).addColumn("stop_lon",lf.Type.STRING).addColumn("zone_id",lf.Type.STRING).addColumn("stop_url",lf.Type.STRING).addColumn("location_type",lf.Type.INTEGER).addColumn("parent_station",lf.Type.STRING).addColumn("platform_code",lf.Type.STRING).addColumn("wheelchair_boarding",lf.Type.INTEGER).addPrimaryKey(["stop_id"]),a.createTable("trips").addColumn("route_id",lf.Type.STRING).addColumn("service_id",lf.Type.STRING).addColumn("trip_id",lf.Type.STRING).addColumn("trip_headsign",lf.Type.STRING).addColumn("trip_short_name",lf.Type.INTEGER).addColumn("direction_id",lf.Type.INTEGER).addColumn("shape_id",lf.Type.STRING).addColumn("wheelchair_accessible",lf.Type.INTEGER).addColumn("bikes_allowed",lf.Type.INTEGER).addPrimaryKey(["route_id","service_id","trip_id"]),console.log("Schema created!!"),a},d.prototype.insertData=function(){var a=this,b=["calendar","calendar_dates","stop_times","stops","trips"],c=null;b.forEach(function(b,d){c="gtfs/"+b+".txt";var e=a.db.getSchema().table(b);fetch(c).then(function(a){return a.text()}).then(function(c){a.importFromTxtToDB(e,c).then(function(){console.log(b+" created")})["catch"](function(a){console.log(b+" is created. "+a)})})["catch"](function(a){console.log("Error(insertData):\n",a)})})},d.prototype.importFromTxtToDB=function(b,c){for(var d=c.split(/\r\n/),e=d[0].split(","),f=[],g=1;g<d.length;g++)if(0!==d[g].length){for(var h={},i=d[g].split(","),j=0;j<e.length;j++){var k=i[j].trim();h[e[j]]=a(k)}f.push(b.createRow(h))}return this.db.insertOrReplace().into(b).values(f).exec()},d.prototype.retrieveStops=function(){return this.db.select(lf.fn.distinct(this.stops.stop_name).as("stop_name")).from(this.stops).orderBy(this.stops.stop_name).exec()},d.prototype.searchSchedule=function(a,d){var e=this.stops,f=this.stop_times,g=this.trips,h=this.calendar_dates,i=this.calendar,j=new Date,k=c(j),l=b(j);return this.db.select(f.trip_id,f.stop_id,f.departure_time,f.arrival_time,e.stop_name).from(e,f,g,i,h).where(lf.op.and(e.stop_id.eq(f.stop_id),f.trip_id.eq(g.trip_id),e.stop_name["in"]([a,d]),i.start_date.lte(k),i.end_date.gte(k),i[l].eq(1),h.exception_type.neq(2),g.service_id.eq(h.service_id))).orderBy(f.departure_time).exec()},d}angular.module("app").factory("transitFactory",a)}(),angular.module("app").run(["$templateCache",function(a){a.put("views/main.html",'<div class="jumbotron"> <h3> Transit times <span ng-show="selected"> for </span><span style="color: red; font-weight: bold">{{selectDeparture}}</span> <span ng-show="selected"> to </span> <span style="color: blue; font-weight: bold">{{selectArrival}}</span> </h3> <div ng-show="err"> <p class="error-msg">{{error}}</p> </div> <div class="col-md-12"> <div class="col-md-6"> <select class="form-control" ng-model="selectDeparture" ng-click="findbtn(selectDeparture, selectArrival)" ng-options="d for d in departureStop"></select> </div> <div class="col-md-6"> <select class="form-control" ng-model="selectArrival" ng-click="findbtn(selectDeparture, selectArrival)" ng-options="a for a in arrivalStop"></select> </div> </div> </div> <table class="table"> <thead class="thead-inverse"> <tr> <th> Departure </th> <th> Arrival </th> <th> Duration </th> </tr> </thead> <tbody> <tr ng-repeat="r in results track by $index"> <td>{{r.departure}}</td> <td>{{r.arrival}}</td> <td>{{r.duration}}</td> </tr> </tbody> </table>')}]);